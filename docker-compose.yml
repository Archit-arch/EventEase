## Development Docker Compose file for EventEase
# This file is used to set up the development environment for EventEase.

# version: '3.8'

# services:
#   frontend:
#     build:
#       context: ./my-react-app
#       dockerfile: Dockerfile.dev
#     ports:
#       - "5173:5173"
#     volumes:
#       - ./my-react-app:/app
#       - node_modules:/app/node_modules
#       - ./backend/certs:/app/certs

#   backend:
#     build:
#       context: ./backend
#       dockerfile: Dockerfile.dev
#     ports:
#       - "5000:5000"
#     environment:
#       - DATABASE_URL=postgresql://archit:architagarwal@db:5432/eventease?schema=public
#       - JWT_SECRET=ePf$A7h&1!jX@9zLd0^nUvR!w4*DqR2P
#       - PORT=5000
#     volumes:
#       - ./backend:/app
#       - ./backend/certs:/app/certs
#     depends_on:
#       - db

#   db:
#     image: postgres:16
#     container_name: eventease-db
#     restart: always
#     environment:
#       POSTGRES_USER: archit
#       POSTGRES_PASSWORD: architagarwal
#       POSTGRES_DB: eventease
#     ports:
#       - "5433:5432"
#     volumes:
#       - postgres_data:/var/lib/postgresql/data

# volumes:
#   postgres_data:
#   node_modules:


### Production Docker Compose file for EventEase
# This file is used to set up the production environment for EventEase.

version: '3.8'

services:
  frontend:
    build:
      context: ./my-react-app
      dockerfile: Dockerfile.prod
    image: eventease-frontend:latest
    container_name: eventease_frontend
    restart: always
    # No ports exposed; NGINX will serve the static files

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    image: eventease-backend:latest
    container_name: eventease_backend
    restart: always
    expose:
      - "5000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - PORT=${PORT}

    volumes:
      - ./backend/certs:/app/certs  #Adding this for nginx <-> backend https communication
    depends_on:
      - db
   
  nginx:
    image: nginx:latest
    container_name: eventease_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/certs:/etc/nginx/certs
      - ./my-react-app/dist:/usr/share/nginx/html
    depends_on:
      - frontend
      - backend

  db:
    image: postgres:16
    container_name: eventease-db
    restart: always
    environment:
    - POSTGRES_USER=${POSTGRES_USER}
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    - POSTGRES_DB=${POSTGRES_DB}

    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]

  prometheus:
    image: prom/prometheus:latest
    container_name: eventease_prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - backend
      - db

  grafana:
    image: grafana/grafana:latest
    container_name: eventease_grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: eventease_postgres_exporter
    environment:
    - DATA_SOURCE_NAME=${POSTGRES_EXPORTER_URL}
    depends_on:
      - db

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    ports:
      - "9100:9100"  # Allow Prometheus to connect via bridge network
    restart: unless-stopped


volumes:
  postgres_data:
  grafana_data:

  